name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: fundhub
          POSTGRES_PASSWORD: fundhub123
          POSTGRES_DB: fundhub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://fundhub:fundhub123@localhost:5432/fundhub_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          STELLAR_NETWORK: testnet
          STELLAR_HORIZON_URL: https://horizon-testnet.stellar.org
          PLATFORM_WALLET_PUBLIC_KEY: GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        run: cargo test --verbose --all

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build-contracts:
    name: Build Soroban Contracts
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown
      
      - name: Install Soroban CLI
        run: cargo install --locked soroban-cli
      
      - name: Build project-registry contract
        working-directory: ./contracts/project-registry
        run: cargo build --target wasm32-unknown-unknown --release
      
      - name: Build funding-escrow contract
        working-directory: ./contracts/funding-escrow
        run: cargo build --target wasm32-unknown-unknown --release
      
      - name: Run contract tests
        working-directory: ./contracts
        run: |
          cd project-registry && cargo test
          cd ../funding-escrow && cargo test
      
      - name: Upload contract artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contracts
          path: |
            contracts/project-registry/target/wasm32-unknown-unknown/release/*.wasm
            contracts/funding-escrow/target/wasm32-unknown-unknown/release/*.wasm

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, build-contracts]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: fundhub-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

